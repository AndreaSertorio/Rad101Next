// App.jsx

import { FocusProvider } from './components/FocusFiles/FocusContext';
import Home from './Home';

const App = () => {
  return (
    <FocusProvider>
      <Home />
    </FocusProvider>
  );
};

export default App;


// layout.jsx

import './globals.css'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={`%{inter.className} bg-slate-800 text-slate-100 container mx-auto p-4`}>{children}</body>
    </html>
  )
}


'use client'

// Home.jsx


import React, { useState } from 'react';
import BarraSup from './components/BarraSup';
import BarraLatSin from './components/BarraLatSin';
import TemplateContainer from './components/Templates/TemplateContainer';
import DrawerDestro from './components/DrawerDestro';
import './Styles/custom.css'; // Aggiungi questa linea
import DrawerWrapper from './components/DrawerWrapper';
import { FocusProvider } from './components/FocusFiles/FocusContext';



export default function Home() {
    const [drawerVisible, setDrawerVisible] = useState(false); // Questo stato controlla la visibilitÃ  del Drawer

  const openDrawer = () => {
    setDrawerVisible(true);
  };

  const closeDrawer = () => {
    setDrawerVisible(false);
  };

  return (
    <div>
      <BarraSup />
      <div style={{display: 'flex'}}>
        <BarraLatSin>
          <h1 className="px-8 py-2 font-semibold text-xl tracking-tight" >hi</h1>
        </BarraLatSin>
        <div className="flex-grow" style={{flexGrow: 1}}>
          <TemplateContainer />
        </div>
      </div>
        <DrawerWrapper /> // Inserisci il WrapperDrawer nella tua pagina

    </div>
  );
}


// BarraLatSin.jsx
'use client'
import { useState } from 'react';
import Sidebar from './Sidebar';
import TemplateContainer from './Templates/TemplateContainer';
import BarraRicercaIndicazioniCliniche from './BarraRicercaIndicazioniCliniche';
import { FaBars, FaTimes } from 'react-icons/fa';

export default function BarraLatSin({ children }) {
  const [selectedMenuItem, setSelectedMenuItem] = useState(null);
  const [selectedSections, setSelectedSections] = useState([]);
  const [isSidebarOpen, setSidebarOpen] = useState(true);
  const [tab, setTab] = useState('metodiche');

  const handleMenuItemClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
  };

    const handleSectionSelection = (section) => {
    if (!selectedSections.some(s => s.id === section.id)) {
      setSelectedSections([...selectedSections, section]);
    }
  };
  const handleSectionDeselection = (section) => {
  setSelectedSections(selectedSections.filter(s => s.id !== section.id));
};


  const toggleSidebar = () => {
    setSidebarOpen(!isSidebarOpen);
  };

  return (
    <div className="flex w-full">
      {isSidebarOpen && 
        <div className="w-64 bg-gray-800 text-white p-4 border-r border-gray-600">
          <div className="flex justify-between mb-4 p-2">
            <button className="rounded-lg border-white border-2 p-2 hover:bg-slate-600 cursor-pointer" onClick={() => setTab('metodiche')}>Metodiche</button>
            <button className="rounded-lg border-white border-2 p-1 hover:bg-slate-600 cursor-pointer"  onClick={() => setTab('indicazioni')}>Indicazioni Cliniche</button>
          </div>
          {tab === 'metodiche' ? (
            <Sidebar onMenuItemClick={handleMenuItemClick} />
          ) : (
              <BarraRicercaIndicazioniCliniche 
                onSectionSelection={handleSectionSelection}
                onSectionDeselection={handleSectionDeselection} // Assicurati che questa linea sia presente
              />
          )}
        </div>
      }
      <button className="mt-4 mx-2" onClick={toggleSidebar}>
        {isSidebarOpen ? <FaTimes /> : <FaBars />}
      </button>
      <div className="flex-grow">
        <TemplateContainer
          selectedMenuItem={selectedMenuItem}
          selectedSections={selectedSections}
          setSelectedSections={setSelectedSections}
        />
      </div>
    </div>
  );
}


// BarraRicercaIndicazioniCliniche.jsx

import React, { useState } from 'react';
import IndicazioniCliniche from './IndicazioniCliniche';

const BarraRicercaIndicazioniCliniche = ({ onSectionSelection, onSectionDeselection }) => {
  const [ricerca, setRicerca] = useState('');

  const handleChange = (event) => {
    setRicerca(event.target.value);
  }

  return (
    <div className="p-4 bg-gray-800 text-white">
      <input 
        type="search" 
        placeholder="Cerca indicazione clinica..." 
        value={ricerca} 
        onChange={handleChange}
        className="w-full px-3 py-2 bg-gray-900 text-white rounded-md" 
      />
          <IndicazioniCliniche 
            ricerca={ricerca} 
            onSectionSelection={onSectionSelection}
            onSectionDeselection={onSectionDeselection} // Assicurati che questa linea sia presente
          />
    </div>
  );
}

export default BarraRicercaIndicazioniCliniche;


//BarraSup.jsx

import Link from 'next/link'

export default function BarraSup() {
  return (
    <nav className="flex items-center justify-between flex-wrap bg-black p-6">
      <div className="flex items-center flex-shrink-0 text-white mr-6">
        <span className="px-12 py-2 font-semibold text-xl tracking-tight">Radiology101</span> {/* Titolo qui */}
      </div>
      <div className="w-full block flex-grow lg:flex lg:items-center lg:w-auto">
        <div className="text-sm lg:flex-grow lg:flex lg:space-x-4">
          <Link href="/">
            <span className="px-5 py-2 border border-white rounded text-white hover:text-teal-500 hover:bg-white cursor-pointer">Home</span>
          </Link>
          <Link href="/page1">
            <span className="px-3 py-2 border border-white rounded text-white hover:text-teal-500 hover:bg-teal-800 cursor-pointer">RadioWiki</span>
          </Link>
          <Link href="/page2">
            <span className="px-3 py-2 border border-white rounded text-white hover:text-teal-500 hover:bg-teal-800 cursor-pointer">Fake IMAIOS</span>
          </Link>
          <Link href="/page3">
            <span className="px-3 py-2 border border-white rounded text-white hover:text-teal-500 hover:bg-teal-800 cursor-pointer">OpenAI</span>
          </Link>
        </div>
        <div>
          <button className="inline-block text-sm px-4 py-2 leading-none border rounded text-white border-white hover:border-transparent hover:text-teal-500 hover:bg-white mt-4 lg:mt-0">Sign In</button>
        </div>
      </div>
    </nav>
  )
}

//Content.jsx

import React from 'react';

function Content({ children }) {
  return (
    <div className="content">
      {children}
    </div>
  );
}

export default Content;



'use client'

//DrawerDestro.jsx
import React, { useContext } from 'react';
import { Button, Drawer, Card, Col, Row } from 'antd';
import { EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';
import '../styles/custom.css'; // Aggiungi questa linea
import { FocusContext } from './FocusFiles/FocusContext';


const { Meta } = Card;

const DrawerDestro = ({ visible, onClose }) => {  // Aggiungi le props qui
  const { focus } = useContext(FocusContext);
console.log(focus);
  return (
    <>
      <Drawer
        title="Informazioni sulla sezione"
        placement="right"
        closable={false}
        onClose={onClose}
        visible={visible}
        width={720}
      >
        <p>Alcuni contenuti...</p>
        <p>Alcuni contenuti...</p>
        <p>Alcuni contenuti...</p>
        <Row gutter={16}>
          {new Array(4).fill(null).map((_, idx) => (
            <Col span={6} key={idx}>
              <Card
                hoverable
                style={{ width: 240 }}
                actions={[
                  <SettingOutlined key="setting" />,
                  <EditOutlined key="edit" />,
                  <EllipsisOutlined key="ellipsis" />,
                ]}
              >
                <Meta
                  title={`Card ${idx + 1}`}
                  description="This is the description"
                />
              </Card>
            </Col>
          ))}
        </Row>
      </Drawer>
    </>
  );
};

export default DrawerDestro;


// DrawerWrapper.jsx

import { useState } from 'react';
import { Button } from 'antd';
import DrawerDestro from './DrawerDestro';
import DescriptionRow from './Templates/DescriptionRow';


const DrawerWrapper = () => {
  const [visible, setVisible] = useState(false);

  const showDrawer = () => {
    setVisible(true);
  };

  const onClose = () => {
    setVisible(false);
  };

  return (
    <div style={{ position: 'fixed', right: 0, top: '50%' }}>
      <Button type="primary" onClick={showDrawer}>
        Apri Menu
      </Button>
        <DrawerDestro focus={focus} visible={visible} onClose={onClose} />
    </div>
  );
};

export default DrawerWrapper;



// IndicazioniCliniche.jsx
import React, { useState, useEffect } from 'react';

const IndicazioniCliniche = ({ ricerca = '', onSectionSelection, onSectionDeselection }) => {
const indicazioniIniziali = [
  { id: 1, nome: 'Trauma Cranico', sezioneId: ['Parenchima_Cerebrale', 'Massa_Cerebrale', 'Shift_Linea_Mediana', 'Tronco_Encefalico', 'Cervelletto', 'Ventricoli_SpaziSubAracnoidei', 'Strutture_Extracraniche', 'Ossa_Craniche'], sottosezioneId: ['Corteccia_Cerebrale', 'Sostanza_Bianca', 'Volumi_Cerebrali', 'Strutture_Mediane', 'Posizione', 'Dimensioni', 'Prendita_Contrasto', 'Densita_Composizione', 'Identificazione', 'Misurazione', 'Causa', 'Mesencefalo', 'Ponte', 'Bulbo', 'Emisferi_Cerebellari', 'Verme_Cerebellare', 'Fossa_Posteriore', 'IV_Ventricolo', 'Ventricoli_Laterali', 'III_Ventricolo', 'IV_Ventricolo', 'Sistema_Seni_Venosi', 'Pelle_Cuoio_Capelluto', 'Muscoli_Cranici', 'Osso_Frontale', 'Ossa_Parietali', 'Ossa_Temporali', 'Osso_Occipitale'] },
  { id: 2, nome: 'Trauma Cranico', sezioneId: ['Shift_Linea_Mediana'], sottosezioneId: ['Volumi_Cerebrali'], descRowId: ['Lobi_Frontali', 'Corteccia_Cerebrale', 'Sostanza_Bianca'] },
  { id: 3, nome: 'Trauma Cranico', sezioneId: ['Tronco_Encefalico'], sottosezioneId: ['Volumi_Cerebrali'], descRowId: ['Lobi_Temporali'] },
  { id: 4, nome: 'Trauma Cranico', sezioneId: ['Cervelletto'], sottosezioneId: ['Volumi_Cerebrali'], descRowId: ['Lobi_Parietali'] },
  { id: 5, nome: 'Trauma Cranico', sezioneId: ['Parenchima_Cerebrale'], sottosezioneId: ['Volumi_Cerebrali'], descRowId: ['Lobi_Occipitali'] },
  { id: 6, nome: 'Trauma Cranico', sezioneId: ['Parenchima_Cerebrale'], sottosezioneId: ['Volumi_Rimanenti_Strutture_Cerebrali'], descRowId: ['Volumi_Rimanenti_Strutture_Cerebrali'] },
  { id: 7, nome: 'Trauma Cranico', sezioneId: ['Parenchima_Cerebrale'], sottosezioneId: ['Volumi_Cerebrali'], descRowId: ['Gangli_della_Base'] },
  { id: 8, nome: 'Trauma Cranico', sezioneId: ['Parenchima_Cerebrale'], sottosezioneId: ['Volumi_Cerebrali'], descRowId: ['Talamo'] },
  { id: 9, nome: 'Trauma Cranico', sezioneId: ['Parenchima_Cerebrale'], sottosezioneId: ['Volumi_Cerebrali'], descRowId: ['Cervelletto'] },
  { id: 10, nome: 'Trauma Cranico', sezioneId: ['Parenchima_Cerebrale'], sottosezioneId: ['Volumi_Cerebrali'], descRowId: ['Tronco_Encefalico'] },
  // Altri oggetti indicazione qui...
];


  const [indicazioni, setIndicazioni] = useState(indicazioniIniziali);
  const [risultatiRicerca, setRisultatiRicerca] = useState(indicazioniIniziali);
  

  useEffect(() => {
    if (ricerca === '') {
      setRisultatiRicerca(indicazioni);
    } else {
      setRisultatiRicerca(
        indicazioni.filter(indicazione =>
          indicazione.nome.toLowerCase().includes(ricerca.toLowerCase())
        )
      );
    }
  }, [ricerca, indicazioni]);

  const handleCheckboxChange = (event, indicazione) => {
    if (event.target.checked) {
      onSectionSelection(indicazione);
    } else {
      onSectionDeselection(indicazione);
    }
  }


  return (
    <div className="p-4 bg-gray-800 text-white">
      <h2>Indicazioni Cliniche</h2>
      <form>
        {risultatiRicerca.map((indicazione, index) => (
          <div className="mb-4" key={index}>
              <input 
                type="checkbox" 
                id={`indicazione${index}`} 
                name={`indicazione${index}`} 
                onChange={(e) => handleCheckboxChange(e, indicazione)}
              />

            <label htmlFor={`indicazione${index}`}> {indicazione.nome}</label><br/>
          </div>
        ))}
      </form>
    </div>
  );
}

export default IndicazioniCliniche;


// Sidebar.jsx
import React from 'react';

const menuItems = [
  {
    title: 'RX',
    subItems: [],
  },
  {
    title: 'TC',
    subItems: ['CT HEAD', 'CT NECK', 'CT SINUSES', 'CT CHEST', 'CT ABDOMEN', 'CT ABDOMEN-PELVIS', 'CT PANKREAS', 'CT SPINE', 'ANGIO TC'],
  },
  {
    title: 'MRI',
    subItems: ['MR NECK', 'MR CARDIAC', 'ANGIO MR', 'MRI WHOLEBODY', 'MR ABDOMEN', 'MR PROSTATA', 'MR SHOULDER', 'MR ELBOW', 'MR SPINE', 'MR WRIST', 'MR HIP', 'MR KNEE', 'MR ANKLE'],
  },
  {
    title: 'ECO',
    subItems: [],
  },
];
function Sidebar({ onMenuItemClick }) {
  return (
    <div className="sidebar bg-gray-800 text-white border-r border-gray-600 w-64 p-4">
      {menuItems.map((menuItem) => (
        <div key={menuItem.title} className="mb-4">
          <button className="mb-2" onClick={() => onMenuItemClick(menuItem.title.toLowerCase())}>
            {menuItem.title}
          </button>
          {menuItem.subItems.map((subItem) => (
            <div key={subItem} className="ml-4">
              <button onClick={() => onMenuItemClick(subItem.toLowerCase().replace(/ /g, '-'))}>
                {subItem}
              </button>
            </div>
          ))}
        </div>
      ))}
    </div>
  );
}

export default Sidebar;


// TabIndicazioniCliniche.jsx


import React from 'react';
import BarraRicercaIndicazioniCliniche from './BarraRicercaIndicazioniCliniche';
import IndicazioniCliniche from './IndicazioniCliniche';

const TabIndicazioniCliniche = () => {
  return (
    <div className="p-4 bg-gray-800 text-white ">
      <BarraRicercaIndicazioniCliniche />
      {/* <IndicazioniCliniche /> */}
    </div>
  );
}

export default TabIndicazioniCliniche;



//tabs.jsx
'use client'

import React, { useState } from 'react';
import Sidebar from './Sidebar';
import TabIndicazioniCliniche from './TabIndicazioniCliniche'; // Importa il tuo componente IndicazioniCliniche qui

const Tabs = () => {
  const [activeTab, setActiveTab] = useState('metodiche');

  return (
    <div className="w-64">
      <div className="flex bg-gray-800">
        <button
          className={`w-1/2 p-3 ${activeTab === 'metodiche' ? 'text-white' : 'text-gray-500'}`}
          onClick={() => setActiveTab('metodiche')}
        >
          Metodiche
        </button>
        <button
          className={` w-1/2 p-3 ${activeTab === 'indicazioni' ? 'text-white' : 'text-gray-500'}`}
          onClick={() => setActiveTab('indicazioni')}
        >
          Indicazioni Cliniche
        </button>
      </div>

      <div className="border-r border-gray-600">
        {activeTab === 'metodiche' && <Sidebar />}
        {activeTab === 'indicazioni' && <TabIndicazioniCliniche />}
      </div>
    </div>
  );
};

export default Tabs;



// TemplateContainer.jsx
'use client'
import React, { useState } from 'react'; // Import useState
import Template from './Template';
// importa templates
import ctNeck from './CTtemplates/ct-neck';
import ctSinuses from './CTtemplates/ct-sinuses';
import cthead from './CTtemplates/ct-head';
import ctChest from './CTtemplates/ct-chest';
import ctAbdomen from './CTtemplates/ct-abdomen';
import ctPankreas from './CTtemplates/ct-pankreas';

const templates = {
    'ct-head': cthead,
    'ct-neck': ctNeck,
    'ct-sinuses': ctSinuses,
    'ct-chest': ctChest,
    'ct-abdomen': ctAbdomen,
    'ct-pankreas': ctPankreas,
};

const TemplateContainer = ({ selectedMenuItem = null, selectedSections = null, setSelectedSections = null }) => {
  // Seleziona il template corretto basandosi sull'id passato
  const selectedTemplate = templates[selectedMenuItem];
  //scrivi una riga che faccia vedere il debug di selectedSections


  // Se non c'Ã¨ nessun template selezionato, non mostrare nulla
  if (!selectedTemplate) {
    return null;
  }

  // Altrimenti, mostra il template selezionato
  return <Template 
            template={selectedTemplate} 
            selectedSections={selectedSections}
            setSelectedSections={setSelectedSections} // Aggiungi questa linea
          />;
};

export default TemplateContainer;




//Template.jsx

'use client'
import React, { useState, useEffect } from 'react';
import Section from './Section';
import PropTypes from 'prop-types';


const Template = ({ template, selectedSections = [] }) => {
    const [sectionDaAprire, setSectionDaAprire] = useState([]);
    const [subsectionDaAprire, setSubSectionDaAprire] = useState([]);
    const [descRowDaAprire, setDescRowDaAprire] = useState([]);
    const [sectionDaEvidenziare, setSectionDaEvidenziare] = useState([]);
    const [subSectionDaEvidenziare, setsubSectionDaEvidenziare] = useState([]);


    useEffect(() => {
        // Imposta sectionDaAprire con gli id delle sezioni in selectedSections
        setSectionDaAprire(selectedSections.map(section => section.sezioneId));
        setSectionDaEvidenziare(selectedSections.map(section => section.sezioneId));
        setSubSectionDaAprire(selectedSections.map(section => section.sottosezioneId));
        setsubSectionDaEvidenziare(selectedSections.map(section => section.sottosezioneId));
        setDescRowDaAprire(selectedSections.map(section => section.descRowId));
    }, [selectedSections]);
    console.log(sectionDaAprire.flat());
    console.log(subsectionDaAprire.flat());
    console.log(descRowDaAprire.flat());
    
      // Funzione per aprire/chiudere una sezione
    const toggleSectionOpen = (sectionId) => {
        let newSectionDaAprire;
        if (sectionDaAprire.flat().includes(sectionId)) {
            newSectionDaAprire = sectionDaAprire.flat().filter(id => id !== sectionId);
        } else {
            newSectionDaAprire = [...sectionDaAprire.flat(), sectionId];
        }
        setSectionDaAprire(newSectionDaAprire);
    };
          // Funzione per aprire/chiudere una sottosezione
    const toggleSubSectionOpen = (subsectionId) => {
        let newSubSectionDaAprire;
        if (subsectionDaAprire.flat().includes(subsectionId)) {
            newSubSectionDaAprire = subsectionDaAprire.flat().filter(id => id !== subsectionId);
        } else {
            newSubSectionDaAprire = [...subsectionDaAprire.flat(), subsectionId];
        }
        setSubSectionDaAprire(newSubSectionDaAprire);
    };
              // Funzione per visualizzare o meno  una descriptionRow
    const toggleDescRowOpen = (descRowId) => {
        let newDescRowDaAprire;
        if (descRowDaAprire.flat().includes(descRowId)) {
            newDescRowDaAprire = descRowDaAprire.flat().filter(id => id !== descRowId);
        } else {
            newDescRowDaAprire = [...descRowDaAprire.flat(), descRowId];
        }
        setDescRowDaAprire(newDescRowDaAprire);
    };

        // Funzione per ottenere il colore di una sezione
        const getSectionColor = (sectionId) => {
            if (sectionDaAprire.flat().includes(sectionId) && sectionDaEvidenziare.flat().includes(sectionId)) {
                return 'bg-sky-800';
            } else if (sectionDaAprire.flat().includes(sectionId)) {
                return 'bg-sky-950';
            } else if (sectionDaEvidenziare.flat().includes(sectionId)) {
                return 'bg-sky-800';
            } else {
                return 'bg-sky-950';
            }
        };
        // Funzione per ottenere il colore di una sottosezione
        const getSubSectionColor = (subsectionId) => {
            if (subsectionDaAprire.flat().includes(subsectionId) && subSectionDaEvidenziare.flat().includes(subsectionId)) {
                return 'bg-sky-800';
            } else if (subsectionDaAprire.flat().includes(subsectionId)) {
                return 'bg-sky-950';
            } else if (subSectionDaEvidenziare.flat().includes(subsectionId)) {
                return 'bg-sky-800';
            } else {
                return 'bg-sky-950';
            }
        };
            // Funzione per ottenere il colore di una DescrRow
    const  getDescRowColor = (descRowId) => {
        return descRowDaAprire.flat().includes(descRowId) ? 'bg-sky-700' : 'bg-sky-900';
    };

  return (
    <div data-template-id={template.id} className="bg-gray-600 p-4 rounded-lg shadow-md min-w-full flex-grow">
      <table className="w-full">
        <thead>
          <tr>
            <th className="p-4">Organo\Sistema</th>
          </tr>
        </thead>
        <tbody>
          {template.sections.map(section => 
                <Section 
                    key={section.title} 
                    {...section} 
                    isOpen={sectionDaAprire.flat().includes(section.id)} // Passa questa prop a Section
                    toggleSectionOpen={toggleSectionOpen} // Passa questa funzione a Section
                    subsectionDaAprire={subsectionDaAprire} // Aggiungi questa linea
                    toggleSubSectionOpen={toggleSubSectionOpen} // Aggiungi questa linea
                    sectionColor={getSectionColor(section.id)}
                  getSectionColor={getSectionColor}
                  getSubSectionColor={getSubSectionColor}
                  getDescRowColor={getDescRowColor}
                  toggleDescRowOpen={toggleDescRowOpen}
                  descRowDaAprire={descRowDaAprire}
                
                />
          )}
        </tbody>
      </table>

      {/* Visualizza l'elenco selectedSections */}
      <div className="mt-4">
        <h2>Selected Sections:</h2>
        <ul>
          {selectedSections.map((section, index) => 
            <li key={index}>
              {`${section.id} ${section.nome} ${section.sezioneId} ${section.sottosezioneId} ${section.descrizioneId}`}
            </li>
          )}
        </ul>
      </div>
    </div>
  );
};

Template.propTypes = {
  selectedSections: PropTypes.array,
  template: PropTypes.object,
};

export default Template;


//Subsection.jsx
'use client'


import React, { useState } from 'react';
import DescriptionRow from './DescriptionRow';

const Subsection = ({ id, title, rows, isOpen, toggleSubSectionOpen, getSubSectionColor, subsectionDaAprire, toggleDescRowOpen, getDescRowColor, descRowDaAprire }) => {
    
    const bgColor = getSubSectionColor(id); // Utilizza getSectionColor per calcolare bgColor

    const toggleOpen = () => {
        toggleSubSectionOpen(id);
    };

     const handleChange = (event) => {
        setValue(event.target.value);
    };

    return (
        <div className={`flex flex-col ml-4 ${bgColor}`}>
            <div className="w-40 h-16 flex rounded-lg border-2 border-white text-center justify-center items-center" onClick={toggleOpen}>
                {title}
            </div>

            {isOpen && rows && (  
                <div className="ml-4 w-full flex flex-col">
                    {rows.map(row => 
                        row.rows 
                            ? <Subsection key={row.id}
                                {...row}
                                    isOpen={subsectionDaAprire.flat().includes(row.id)}
                                toggleSubSectionOpen={toggleSubSectionOpen}
                                subsectionDaAprire={subsectionDaAprire}
                                getSubSectionColor={getSubSectionColor}
                                getDescRowColor={getDescRowColor}
                                toggleDescRowOpen={toggleDescRowOpen}
                                descRowDaAprire={descRowDaAprire}                  
                            />
                            :     <DescriptionRow 
                                        key={row.id} 
                                {...row} 
                                        isOpen={descRowDaAprire.flat().includes(row.id)}
                                        getDescRowColor={getDescRowColor}
                                        toggleDescRowOpen={toggleDescRowOpen}
                                        descRowDaAprire={descRowDaAprire}
                                    />
                    )}
                </div>
            )}
        </div>
    );
};

export default Subsection;




//Section.jsx
'use client'
import React, { useState, useEffect } from 'react';
import Subsection from './Subsection';
import DescriptionRow from './DescriptionRow';
import PropTypes from 'prop-types';

const Section = ({ id, title, description, rows, isSelected, isOpen, toggleSectionOpen, getSectionColor, subsectionDaAprire, toggleSubSectionOpen, toggleDescRowOpen, getDescRowColor, descRowDaAprire, getSubSectionColor}) => {
    const [value, setValue] = useState(description || '');

    const handleChange = (event) => {
        setValue(event.target.value);
        localStorage.setItem(`sectionInput-${id}`, event.target.value);
    };

    useEffect(() => {
        const savedUserInput = localStorage.getItem(`sectionInput-${id}`);
        if (savedUserInput) {
            setValue(savedUserInput);
        } else {
            setValue(description);
        }
    }, [id, description]);

            // all'interno del componente Section
    const toggleSection = () => {
        toggleSectionOpen(id);
    };


    // Modifica il colore di sfondo in base allo stato di selezione
    const bgColor = getSectionColor(id); // Utilizza getSectionColor per calcolare bgColor

    return (
        <tr id={id} className={`flex flex-col border-black border-t-2 my-1 rounded-lg shadow-lg ${isOpen ? bgColor : getSectionColor(id)}`}>
            <td 
                className="flex justify-between font-bold cursor-pointer p-2 border-b-2">
                <span onClick={toggleSection} className="w-40 p-1 rounded-lg border-2 border-gray-400 items-center">{title}</span>
                <textarea 
                    className="bg-sky-200 text-black flex-grow ml-8 pl-3 pt-1" 
                    value={value} 
                    onChange={handleChange} 
                    rows="auto" 
                    style={{resize: 'none', minHeight: '1em', maxHeight: '20em'}}
                />
            </td>
            {isOpen && (
                <td className="ml-4 w-full flex flex-col">
                    {rows.map(row => 
                        row.rows 
                        ? <Subsection 
                            key={row.id} 
                            {...row} 
                            isOpen={subsectionDaAprire.flat().includes(row.id)} // Modifica questa linea
                            toggleSubSectionOpen={toggleSubSectionOpen} // Aggiungi questa linea
                                subsectionDaAprire={subsectionDaAprire}
                                getSubSectionColor={getSubSectionColor}
                                getDescRowColor={getDescRowColor}
                                toggleDescRowOpen={toggleDescRowOpen}
                                descRowDaAprire={descRowDaAprire}
                            />
                            :     <DescriptionRow 
                                        key={row.id} 
                                {...row} 
                                        isOpen={descRowDaAprire.flat().includes(row.id)}
                                        getDescRowColor={getDescRowColor}
                                        toggleDescRowOpen={toggleDescRowOpen}
                                        descRowDaAprire={descRowDaAprire}
                                    />
                    )}
                </td>
            )}
        </tr>
    );
};

Section.propTypes = {
    id: PropTypes.oneOfType([    PropTypes.number,    PropTypes.string  ]).isRequired,
    title: PropTypes.string,
    description: PropTypes.string,
    rows: PropTypes.array,
    isSelected: PropTypes.bool,
    isOpen: PropTypes.bool,
    toggleSectionOpen: PropTypes.func,
    getSectionColor: PropTypes.func,
};

export default Section;



// DescriptionTable.jsx
import React from 'react';
import DescriptionRow from './DescriptionRow';

const DescriptionTable = ({ rows }) => (
    <div className="mt-4 bg-gray-100 rounded-lg">
        {rows.map(row => <DescriptionRow key={row.title} {...row} />)}
    </div>
);

export default DescriptionTable;



// DescriptionRow.jsx
'use client'
import React, { useEffect, useState, useContext } from 'react';
import focusFiles from '../FocusFiles'; // Importa tutti i file di focus
import { FocusContext } from '../FocusFiles/FocusContext';


const DescriptionRow = ({ id, title, description, isOpen, toggleDescRowOpen, getDescRowColor, descRowDaAprire }) => {
    const [value, setValue] = React.useState(description || '');
  const { setFocus } = useContext(FocusContext);


            // Quando il titolo viene cliccato, aggiorna il focus
        const handleClick = () => {
            setFocus(focusFiles[id]);
        };
        useEffect(() => {
        // Quando il componente viene montato, recupera lo stato dal Local Storage
        const savedUserInput = localStorage.getItem(id);
        if (savedUserInput) {
            setValue(savedUserInput);
        }
        }, [id]);
    
    const handleChange = (event) => {
        const newValue = event.target.value;
        setValue(newValue);
        // Quando l'input dell'utente cambia, salva nel Local Storage
        localStorage.setItem(id, newValue);
    };


    const bgColor = getDescRowColor(id);

    return (
        <div className={`flex flex-col p-2 text-white rounded-lg shadow-md mr-12 ml-10 ${bgColor}`}>
            <div className="flex justify-between pl-6">
                <span onClick={handleClick}  className="font-bold mr-2 cursor-pointer p-1 rounded-lg text-right w-28">{title}:</span>
                <textarea 
                    className="bg-sky-100 text-black flex-grow pl-3 pt-1" 
                    value={value} 
                    onChange={handleChange} 
                    rows="auto" 
                    style={{resize: 'none'}}
                />
            </div>
        </div>
    );
};

export default DescriptionRow;



// focusFiles/CerebralCortex.js

export default {
  id: "cerebralCortex", // Aggiungi un ID univoco per ogni focus
  title: "Corteccia_Cerebrale",
  tableDesc: "Descrizione della corteccia cerebrale...",
  normalDesc: "Una breve descrizione di come dovrebbe apparire normalmente la corteccia cerebrale...",
  imageDesc: "Come guardare la corteccia cerebrale nelle immagini...",
  imagePath: "img/grey_matter.jpeg",
  pathologyList: ["Cortical Atrophy", "Cortical Dysplasia", "Cerebral Edema"]
};


// FocusContext.js
'use client'

import { createContext, useState } from 'react';

export const FocusContext = createContext();

export const FocusProvider = ({ children }) => {
  const [focus, setFocus] = useState(null);

  return (
    <FocusContext.Provider value={{ focus, setFocus }}>
      {children}
    </FocusContext.Provider>
  );
};


// focusFiles/index.js

import CerebralCortex from './CerebralCortex';
// Importa gli altri file di focus qui

// Esporta un oggetto con tutti i focus, usando l'ID come chiave
export default {
  cerebralCortex: CerebralCortex,
  // Aggiungi gli altri focus qui
};




const ctHead = {
    id: 'ct-head',
    sections: [
        {
            id: 'Parenchima_Cerebrale',
            title: 'PARENCHIMA CEREBRALE',
            description: 'Descrizione dell\'integritÃ  e simmetria della sostanza grigia corticale.',
            rows: [
                {
                    id: 'Corteccia_Cerebrale',
                    title: 'CORTECCIA CEREBRALE',
                    description: 'Descrizione dell\'integritÃ  e simmetria della sostanza grigia corticale.'
                },
                {
                    id: 'Sostanza_Bianca',
                    title: 'SOSTANZA BIANCA',
                    description: 'Descrizione della sostanza bianca, segni di leucodistrofia o lesioni ipodense.'
                },
                {
                    id: 'Volumi_Cerebrali',
                    title: 'VOLUMI CEREBRALI',
                    description: 'Descrizione del volume generale del cervello, eventuali segni di atrofia cerebrale o di un aumento del volume cerebrale.',
                    rows: [
                        {
                            id: 'Volumi_Lobi_Cerebrali',
                            title: 'LOBI CEREBRALI',
                            rows: [
                                {
                                    id: 'Lobi_Frontali',
                                    title: 'Lobi Frontali',
                                    description: 'Descrizione del volume e della simmetria dei lobi frontali, eventuali segni di atrofia o di espansione.',
                                },
                                {
                                    id: 'Lobi_Temporali',
                                    title: 'Lobi Temporali',
                                    description: 'Descrizione del volume e della simmetria dei lobi temporali, eventuali segni di atrofia o di espansione.',
                                },
                                {
                                    id: 'Lobi_Parietali',
                                    title: 'Lobi Parietali',
                                    description: 'Descrizione del volume e della simmetria dei lobi parietali, eventuali segni di atrofia o di espansione.',
                                },
                                {
                                    id: 'Lobi_Occipitali',
                                    title: 'Lobi Occipitali',
                                    description: 'Descrizione del volume e della simmetria dei lobi occipitali, eventuali segni di atrofia o di espansione.',
                                },
                            ],
                        },
                        {
                            id: 'Volumi_Rimanenti_Strutture_Cerebrali',
                            title: 'RIMANENTI STRUTTURE',
                            rows: [
                                {
                                    id: 'Gangli_della_Base',
                                    title: 'Gangli della Base',
                                    description: 'Descrizione del volume dei gangli della base, eventuali segni di atrofia o di espansione.',
                                },
                                {
                                    id: 'Talamo',
                                    title: 'Talamo',
                                    description: 'Descrizione del volume del talamo, eventuali segni di atrofia o di espansione.',
                                },
                                {
                                    id: 'Cervelletto',
                                    title: 'Cervelletto',
                                    description: 'Descrizione del volume del cervelletto, eventuali segni di atrofia o di espansione.',
                                },
                                {
                                    id: 'Tronco_Encefalico',
                                    title: 'Tronco Encefalico',
                                    description: 'Descrizione del volume del tronco encefalico, eventuali segni di atrofia o di espansione.',
                                },
                            ],
                        },
                    ],
                },
                {
                    id: 'Strutture_Mediane',
                    title: 'STRUTTURE MEDIANE',
                    rows: [
                        {
                            id: 'Gangli_della_Base',
                            title: 'Gangli della Base',
                            description: 'Descrizione dei gangli della base, inclusi nucleo caudato, putamen e globo pallido.',
                        },
                        {
                            id: 'Talamo',
                            title: 'Talamo',
                            description: 'Descrizione dei talami, simmetria e densitÃ .',
                        },
                        {
                            id: 'Ippocampi',
                            title: 'Ippocampi',
                            description: 'Descrizione degli ippocampi, segni di atrofia o anomalie della densitÃ .',
                        },
                        {
                            id: 'Fornice_Corpi_Mammillari',
                            title: 'Fornice e Corpi Mammillari',
                            description: 'Descrizione del fornice e dei corpi mammillari.',
                        },
                        {
                            id: 'Corpo_Calloso',
                            title: 'Corpo Calloso',
                            description: 'Descrizione del corpo calloso, eventuali segni di agenesia, disgenesia o lesioni.',
                        },
                    ],
                },
                {
                    id: 'Ischemia_Cerebrale',
                    title: 'ISCHEMIA',
                    rows: [
                        {
                            id: 'Infarto_Acuto',
                            title: 'Infarto Acuto',
                            description: 'Descrizione dell\'infarto acuto, se presente.',
                        },
                        {
                            id: 'Infarto_Cronico',
                            title: 'Infarto Cronico',
                            description: 'Descrizione dell\'infarto cronico, se presente.',
                        },
                        {
                            id: 'Localizzazione',
                            title: 'Localizzazione',
                            description: 'Descrizione della localizzazione dell\'area ischemica.',
                        },
                        {
                            id: 'Estensione',
                            title: 'Estensione',
                            description: 'Descrizione dell\'estensione dell\'area ischemica.',
                        },
                        {
                            id: 'Effetto_Massa',
                            title: 'Effetto Massa',
                            description: 'Descrizione dell\'effetto massa sulla strutture vicine, se presente.',
                        },
                        {
                            id: 'Malattia_Cronica_Piccole_Vie_Vascolari',
                            title: 'Malattia Cronica delle Piccole Vie Vascolari',
                            description: 'Descrizione della presenza di malattia cronica delle piccole vie vascolari.',
                        },
                        {
                            id: 'Microemorragie_Cerebrali',
                            title: 'Microemorragie Cerebrali',
                            description: 'Descrizione della presenza di microemorragie cerebrali.',
                        },
                        {
                            id: 'Commenti_Aggiuntivi',
                            title: 'Commenti Aggiuntivi',
                            description: 'Qualsiasi altra osservazione rilevante sull\'ischemia.',
                        },
                    ],
                },
                {
                    id: 'Massa_Cerebrale',
                    title: 'MASSA',
                    rows: [
                        {
                            id: 'Posizione',
                            title: 'Posizione',
                            description: 'Descrizione della posizione della massa.',
                        },
                        {
                            id: 'Dimensioni',
                            title: 'Dimensioni',
                            description: 'Descrizione delle dimensioni della massa.',
                        },
                        {
                            id: 'Prendita_Contrasto',
                            title: 'Prendita di Contrasto',
                            description: 'Descrizione della capacitÃ  della massa di prendere contrasto.',
                        },
                        {
                            id: 'Effetto_Massa',
                            title: 'Effetto Massa',
                            description: 'Descrizione dell\'effetto massa sulla strutture vicine.',
                        },
                        {
                            id: 'Densita_Composizione',
                            title: 'DensitÃ /Composizione',
                            description: 'Descrizione della densitÃ  e composizione interna della massa, inclusi eventuali segni di emorragia o altre caratteristiche.',
                        },
                        {
                            id: 'Commenti_Aggiuntivi',
                            title: 'Commenti Aggiuntivi',
                            description: 'Qualsiasi altra osservazione rilevante sulla massa.',
                        },
                    ],
                },
            ]
        },

        {
            id: 'Shift_Linea_Mediana',
            title: 'SHIFT DELLA LINEA MEDIANA',
            rows: [
                {
                    id: 'Identificazione',
                    title: 'Identificazione',
                    description: 'Descrizione dell\'identificazione della linea mediana del cranio.',
                },
                {
                    id: 'Misurazione',
                    title: 'Misurazione',
                    description: 'Descrizione della misurazione della distanza tra la linea mediana del cranio e la linea mediana del terzo ventricolo o del corpo calloso.',
                },
                {
                    id: 'Causa',
                    title: 'Causa',
                    description: 'Descrizione della causa dello spostamento della linea mediana.',
                },
                {
                    id: 'Parenchima_Cerebrale',
                    title: 'Parenchima Cerebrale',
                    description: 'Descrizione del parenchima cerebrale, eventuali segni di ipodensitÃ  o iperdensitÃ  osservata.',
                },
                {
                    id: 'Strutture_Adiacenti',
                    title: 'Strutture Adiacenti',
                    description: 'Descrizione delle strutture adiacenti, eventuali segni di compressione o spostamento del ventricolo laterale o del terzo ventricolo.',
                },
                {
                    id: 'Fossa Posteriore',
                    title: 'Fossa Posteriore',
                    description: 'Descrizione della fossa posteriore, eventuali segni di edema cerebellare o di ematoma che potrebbe causare un effetto di massa.',
                },
                {
                    id: 'Gravita',
                    title: 'GravitÃ ',
                    description: 'Descrizione dello spostamento della linea mediana osservato.',
                },
            ],
        },
        {
            id: 'Tronco_Encefalico',
            title: 'TRONCO ENCEFALICO',
            rows: [
                {
                    id: 'Mesencefalo',
                    title: 'Mesencefalo (Midbrain)',
                    description: 'Descrizione del mesencefalo, incluse le strutture come i collicoli superiori e inferiori, sostanza nera e acquedotto cerebrale.',
                },
                {
                    id: 'Ponte',
                    title: 'Ponte (Pons)',
                    description: 'Descrizione del ponte, comprese le sue fibre trasversali e longitudiali e il quarto ventricolo.',
                },
                {
                    id: 'Bulbo',
                    title: 'Bulbo (Medulla Oblongata)',
                    description: 'Descrizione del bulbo, incluse le piramidi e l\'oliva, nonchÃ© la continuitÃ  con il midollo spinale.',
                },
            ],
        },
        {
            id: 'Cervelletto',
            title: 'CERVELLETTO',
            rows: [
                {
                    id: 'Emisferi_Cerebellari',
                    title: 'Emisferi Cerebellari',
                    description: 'Descrizione della simmetria, morfologia e densitÃ  dei due emisferi cerebellari.',
                },
                {
                    id: 'Verme_Cerebellare',
                    title: 'Verme Cerebellare',
                    description: 'Descrizione del verme cerebellare, comprese le sue dimensioni e densitÃ .',
                },
                {
                    id: 'Fossa_Posteriore',
                    title: 'Fossa Posteriore',
                    description: 'Descrizione dello spazio della fossa posteriore, eventuali segni di ipertensione intracranica o idrocefalo.',
                },
                {
                    id: 'IV_Ventricolo',
                    title: 'IV VENTRICOLO',
                    description: 'Descrizione del quarto ventricolo, compresa la sua posizione, dimensioni e eventuali segni di dilatazione o compressione.',
                },
            ],
        },
        {
            id: 'Ventricoli_SpaziSubAracnoidei',
            title: 'VENTRICOLI E SPAZI SUBARACNOIDEI',
            rows: [
                {
                    id: 'Ventricoli_Laterali',
                    title: 'Ventricoli Laterali',
                    description: 'Dimensioni, forma e simmetria normali. Nessun segno di dilatazione o asimmetria.',
                },
                {
                    id: 'III_Ventricolo',
                    title: 'III VENTRICOLO',
                    description: 'Normale. Nessun segno di dilatazione.',
                },
                {
                    id: 'IV_Ventricolo',
                    title: 'IV VENTRICOLO',
                    description: 'Normale. Nessun segno di dilatazione.',
                },
                {
                    id: 'Sistema_Seni_Venosi',
                    title: 'SISTEMA DEI SENI VENOSI',
                    description: 'Normale. Nessun segno di anomalie o trombosi.',
                },
                {
                    id: 'Cisterne_Base_SpaziSubaracnoidei',
                    title: 'CISTERNE DELLA BASE E SPAZI SUBARACNOIDEI',
                    description: 'Normali. Nessun segno di sanguinamento o aumento di spazio.',
                },
                {
                    id: 'Spazio_Subdurale_Epidurale',
                    title: 'SPAZIO SUBDURALE E EPIDURALE',
                    description: 'Normale. Nessun segno di raccolta fluida o emorragia.',
                },
            ],
        },
        {
            id: 'Strutture_Extracraniche',
            title: 'STRUTTURE EXTRACRANICHE',
            rows: [
                {
                    id: 'Pelle_Cuoio_Capelluto',
                    title: 'Pelle e Cuoio Capelluto',
                    description: 'Normale',
                },
                {
                    id: 'Muscoli_Cranici',
                    title: 'Muscoli Cranici',
                    description: 'Normale',
                },
                {
                    id: 'Ghiandole_Salivari',
                    title: 'Ghiandole Salivari',
                    description: 'Normale',
                },
                {
                    id: 'Seni_Paranasali',
                    title: 'Seni Paranasali',
                    description: 'Normale',
                },
                {
                    id: 'Regione_Orbitaria',
                    title: 'Regione Orbitaria',
                    description: 'Normale',
                },
            ],
        },
        {
            id: 'Ossa_Craniche',
            title: 'OSSA CRANICHE',
            rows: [
                {
                    id: 'Osso_Frontale',
                    title: 'Osso Frontale',
                    description: 'Normale',
                },
                {
                    id: 'Ossa_Parietali',
                    title: 'Ossa Parietali',
                    description: 'Normale',
                },
                {
                    id: 'Ossa_Temporali',
                    title: 'Ossa Temporali',
                    description: 'Normale',
                },
                {
                    id: 'Osso_Occipitale',
                    title: 'Osso Occipitale',
                    description: 'Normale',
                },
                {
                    id: 'Fossa_Cranica',
                    title: 'Fossa Cranica Anteriore, Media e Posteriore',
                    description: 'Normale',
                },
                {
                    id: 'Base_Cranio',
                    title: 'Base del Cranio',
                    description: 'Normale',
                },
                {
                    id: 'Sutura_Cranica',
                    title: 'Sutura Cranica',
                    description: 'Normale',
                },
                {
                    id: 'Valutazione_Finale_Osseo_Cranico',
                    title: 'Valutazione Finale dell\'Osseo Cranico',
                    description: 'Normale',
                },
            ],
        },
        {
            id: 'AngioTC_Vascolarizzazione',
            title: 'AngioTC - Vascolarizzazione',
            rows: [
                {
                    id: 'Arterie_Carotidi',
                    title: 'Arterie Carotidi',
                    rows: [
                        {
                            id: 'Carotidi_Comuni',
                            title: 'Carotidi Comuni',
                            rows: [
                                {
                                    id: 'Sinistra',
                                    title: 'Sinistra',
                                    description: 'Permeabile.',
                                },
                                {
                                    id: 'Destra',
                                    title: 'Destra',
                                    description: 'Permeabile.',
                                },
                            ],
                        },
                        {
                            id: 'Carotidi_Interne',
                            title: 'Carotidi Interne',
                            rows: [
                                {
                                    id: 'Sinistra',
                                    title: 'Sinistra',
                                    description: 'Permeabile.',
                                },
                                {
                                    id: 'Destra',
                                    title: 'Destra',
                                    description: 'Permeabile.',
                                },
                            ],
                        },
                        {
                            id: 'Carotidi_Esterne',
                            title: 'Carotidi Esterne',
                            rows: [
                                {
                                    id: 'Sinistra',
                                    title: 'Sinistra',
                                    description: 'Permeabile.',
                                },
                                {
                                    id: 'Destra',
                                    title: 'Destra',
                                    description: 'Permeabile.',
                                },
                            ],
                        },
                    ],
                },
                {
                    id: 'Circolo_Willis',
                    title: 'Circolo di Willis',
                    rows: [
                        {
                            id: 'Arteria_Cerebrale_Anteriore',
                            title: 'Arteria cerebrale anteriore',
                            description: 'Permeabile.',
                        },
                        {
                            id: 'Arteria_Comunicante_Anteriore',
                            title: 'Arteria comunicante anteriore',
                            description: 'Permeabile.',
                        },
                        {
                            id: 'Arteria_Cerebrale_Media',
                            title: 'Arteria cerebrale media',
                            description: 'Permeabile.',
                        },
                        {
                            id: 'Arteria_Cerebrale_Posteriore',
                            title: 'Arteria cerebrale posteriore',
                            description: 'Permeabile.',
                        },
                        {
                            id: 'Arteria_Comunicante_Posteriore',
                            title: 'Arteria comunicante posteriore',
                            description: 'Permeabile.',
                        },
                    ],
                },
                {
                    id: 'Circolo_Posteriore',
                    title: 'Circolo Posteriore',
                    rows: [
                        {
                            id: 'Arterie_Vertebrali',
                            title: 'Arterie Vertebrali',
                            rows: [
                   {
                                    id: 'Sinistra',
                                    title: 'Sinistra',
                                    description: 'Permeabile.',
                                },
                                {
                                    id: 'Destra',
                                    title: 'Destra',
                                    description: 'Permeabile.',
                                },
                            ],
                        },
                        {
                            id: 'Arterie_Basilari',
                            title: 'Arterie Basilari',
                            rows: [
                                {
                                    id: 'Basilaris',
                                    title: 'Basilaris',
                                    description: 'Permeabile.',
                                },
                            ],
                        },
                        {
                            id: 'PICA',
                            title: 'PICA',
                            rows: [
                                {
                                    id: 'Sinistra',
                                    title: 'Sinistra',
                                    description: 'Permeabile.',
                                },
                                {
                                    id: 'Destra',
                                    title: 'Destra',
                                    description: 'Permeabile.',
                                },
                            ],
                        },
                        {
                            id: 'AICA',
                            title: 'AICA',
                            rows: [
                                {
                                    id: 'Sinistra',
                                    title: 'Sinistra',
                                    description: 'Permeabile.',
                                },
                                {
                                    id: 'Destra',
                                    title: 'Destra',
                                    description: 'Permeabile.',
                                },
                            ],
                        },
                    ],
                },
                {
                    id: 'Seni_Venosi',
                    title: 'Seni Venosi della Dura Madre',
                    rows: [
                        {
                            id: 'Seni_Sagittale_Superiore',
                            title: 'Seni sagittale superiore',
                            description: 'Permeabile.',
                        },
                        {
                            id: 'Seni_Sagittale_Inferiore',
                            title: 'Seni sagittale inferiore',
                            description: 'Permeabile.',
                        },
                        {
                            id: 'Seni_Trasverso',
                            title: 'Seni trasverso',
                            description: 'Permeabile.',
                        },
                        {
                            id: 'Seni_Sigmoideo',
                            title: 'Seni sigmoideo',
                            description: 'Permeabile.',
                        },
                        {
                            id: 'Seni_Cavernoso',
                            title: 'Seni cavernoso',
                            description: 'Permeabile.',
                        },
                    ],
                },
                {
                    id: 'Vene_Giugulari',
                    title: 'Vene Giugulari',
                    rows: [
                        {
                            id: 'Vene_Giugulari_Interne',
                            title: 'Vene Giugulari interne',
                            description: 'Permeabile.',
                        },
                        {
                            id: 'Vene_Giugulari_Esterne',
                            title: 'Vene Giugulari esterne',
                            description: 'Permeabile.',
                        },
                    ],
                },
            ],
        },
        {
            id: 'Altri_Risultati',
            title: 'ALTRI RISULTATI',
            rows: [
                {
                    id: 'Commenti_Aggiuntivi',
                    title: 'Commenti Aggiuntivi',
                    description: 'Eventuali ulteriori osservazioni',
                },
            ],
        },

    ],
};

export default ctHead;




// ct-neck.js
const ctNeck = {
    id: 'ct-neck',
    sections: [
        {
            id: 'section1',
            title: 'Neck soft tissues',
            rows: [
                {
                    title: 'THYROID',
                    description: 'The thyroid gland is homogeneous in texture and has normal dimensions (right lobe measures 5.0 x 1.8 x 1.7 cm and left lobe measures 4.5 x 1.6 x 1.5 cm). No nodules or masses are identified.',
                },
                {
                    title: 'LYMPH NODES',
                    description: 'Multiple small reactive lymph nodes are noted in the bilateral cervical chains.',
                },
                {
                    title: 'MUSCLES',
                    description: 'The sternocleidomastoid and strap muscles appear normal in appearance and signal intensity.',
                },
                {
                    title: 'FAT',
                    description: 'The subcutaneous and prevertebral fat are within normal limits.',
                },
                {
                    title: 'VESSELS',
                    description: 'The carotid and vertebral arteries are patent without evidence of stenosis or aneurysm.',
                },
            ],
        },
        // ...altre sezioni
    ],
};

export default ctNeck;



const ctAbdomen = {
    id: 'ct-abdomen',
    sections: [
        {
            id: 'Abdomen',
            title: 'ABDOMEN',
            rows: [
                {
                    id: 'Liver',
                    title: 'LIVER',
                    rows: [
                        {
                            id: 'Liver_Description',
                            title: '',
                            description: 'The liver appears normal in size and attenuation, with no focal lesions or biliary ductal dilatation detected. The gallbladder contains multiple gallstones, but there are no signs of cholecystitis or wall thickening.',
                        }
                    ]
                },
                {
                    id: 'Biliary_System',
                    title: 'BILIARY SYSTEM',
                    rows: [
                        {
                            id: 'Biliary_System_Description',
                            title: '',
                            description: 'Descrizione da inserire.',
                        }
                    ]
                },
                {
                    id: 'Spleen',
                    title: 'SPLEEN',
                    rows: [
                        {
                            id: 'Spleen_Description',
                            title: '',
                            description: 'Normal.',
                        }
                    ]
                },
                {
                    id: 'Pancreas',
                    title: 'PANCREAS',
                    rows: [
                        {
                            id: 'Pancreas_Description',
                            title: '',
                            description: 'Normal.',
                        }
                    ]
                },
                {
                    id: 'Adrenal_Glands',
                    title: 'ADRENAL GLANDS',
                    rows: [
                        {
                            id: 'Adrenal_Glands_Description',
                            title: '',
                            description: 'Normal.',
                        }
                    ]
                },
                {
                    id: 'Kidneys',
                    title: 'KIDNEYS',
                    rows: [
                        {
                            id: 'Kidneys_Description',
                            title: '',
                            description: 'Both kidneys are within normal limits in terms of size and configuration. No renal or ureteral stones are present, and there is no hydroureter or hydronephrosis. The bladder appears unremarkable, with no intrinsic or extrinsic masses.',
                        }
                    ]
                },
               {
                    id: 'Bladder',
                    title: 'BLADDER',
                    rows: [
                        {
                            id: 'Bladder_Description',
                            title: '',
                            description: '',
                        }
                    ]
                },
                {
                    id: 'Bowel',
                    title: 'BOWEL',
                    rows: [
                        {
                            id: 'Bowel_Description',
                            title: '',
                            description: 'Diverticulosis is observed in the sigmoid colon, but no signs of acute diverticulitis are present. No bowel obstruction or significant bowel wall thickening is detected.',
                        }
                    ]
                },
                {
                    id: 'Appendix',
                    title: 'APPENDIX',
                    rows: [
                        {
                            id: 'Appendix_Description',
                            title: '',
                            description: 'The appendix is not visualized, and there is no periappendiceal fat stranding.',
                        }
                    ]
                },
                {
                    id: 'Peritoneal_Cavity',
                    title: 'PERITONEAL CAVITY',
                    rows: [
                        {
                            id: 'Peritoneal_Cavity_Description',
                            title: '',
                            description: 'No abdominal ascites or lymphadenopathy is identified.',
                        }
                    ]
                },
                {
                    id: 'Uterus_and_Ovaries',
                    title: 'UTERUS AND OVARIES (IF PRESENT)',
                    rows: [
                        {
                            id: 'Uterus_and_Ovaries_Description',
                            title: '',
                            description: '',
                        }
                    ]
                },
                {
                    id: 'Prostate_and_Seminal_Glands',
                    title: 'PROSTATE AND SEMINAL GLANDS (IF PRESENT)',
                    rows: [
                        {
                            id: 'Prostate_and_Seminal_Glands_Description',
                            title: '',
                            description: 'The prostate gland is grossly unremarkable, and no pelvic ascites or lymphadenopathy is observed.',
                        }
                    ]
                },
                {
                    id: 'Vasculature',
                    title: 'VASCULATURE',
                    rows: [
                        {
                            id: 'Vasculature_Description',
                            title: '',
                            description: 'Normal.',
                        }
                    ]
                },
                {
                    id: 'Lymph_Nodes',
                    title: 'LYMPH NODES',
                    rows: [
                        {
                            id: 'Lymph_Nodes_Description',
                            title: '',
                            description: 'Normal.',
                        }
                    ]
                }


            ]
        },
        // Altre sezioni qui se necessario...
    ],
}

export default ctAbdomen;